/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
##--------------------------------------------------------------------------------------------------------
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
#set( $jdbc = $jdbcFactory.getInstance($entity) )
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder($SRC)};

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import ${ENTITY_PKG}.${entity.name};
import ${ROOT_PKG}.dao.${entity.name}DAO;
import ${ROOT_PKG}.dao.impl.jdbc.commons.GenericDAO;

/**
 * ${entity.name} DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
public class ${entity.name}DAOImpl extends GenericDAO<${entity.name}> implements ${entity.name}DAO {

	private final static String SQL_SELECT = 
		"$jdbc.sqlSelect";

	private final static String SQL_INSERT = 
		"$jdbc.sqlInsert";

	private final static String SQL_UPDATE = 
#if ( $entity.nonKeyAttributesCount > 0 )
		"$jdbc.sqlUpdate";
#else
		"NO UPDATE (NO DATA)";
#end

	private final static String SQL_DELETE = 
		"$jdbc.sqlDelete";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from ${entity.databaseTable}";

	private final static String SQL_COUNT = 
		"$jdbc.sqlExists";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public ${entity.name}DAOImpl() {
		super();
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
	 * @param ${attribute.name};
#end
	 * @return the new instance
	 */
	private ${entity.name} newInstanceWithPrimaryKey( $fn.argumentsListWithType( $jdbc.attributesForPrimaryKey ) ) {
		${entity.name} $uncapitalizedEntityName = new ${entity.name}();
##		customer.setCode(code);
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
		${uncapitalizedEntityName}.${attribute.setter}( ${attribute.name} );
#end
		return $uncapitalizedEntityName ;
	}

	//----------------------------------------------------------------------
	/**
	 * Finds a bean by its primary key 
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
	 * @param ${attribute.name};
#end
	 * @return the bean found or null if not found 
	 */
	@Override
	public ${entity.name} find( $fn.argumentsListWithType( $jdbc.attributesForPrimaryKey ) ) {
		${entity.name} $uncapitalizedEntityName = newInstanceWithPrimaryKey( $fn.argumentsList($jdbc.attributesForPrimaryKey) ) ;
		if ( super.doSelect($uncapitalizedEntityName) ) {
			return $uncapitalizedEntityName ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param $uncapitalizedEntityName
	 * @return true if found, false if not found
	 */
	@Override
	public boolean load( ${entity.name} $uncapitalizedEntityName ) {
		return super.doSelect($uncapitalizedEntityName) ;
	}
    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param $uncapitalizedEntityName
	 */
	@Override
#if ( $entity.hasAutoIncrementedKey() )
#set( $attrib = $entity.autoincrementedKeyAttribute )
	public $attrib.type insert(${entity.name} ${uncapitalizedEntityName}) {
		Long key = super.doInsertAutoIncr($uncapitalizedEntityName);
#if ( $attrib.isByteType() )
		return key.byteValue();
#elseif ( $attrib.isShortType() )
		return key.shortValue();
#elseif ( $attrib.isIntegerType() )
		return key.intValue();
#elseif ( $attrib.isLongType() )
		return key.longValue();
#else
		return key.longValue();
#end
	}
#else
	public void insert(${entity.name} ${uncapitalizedEntityName}) {
		super.doInsert($uncapitalizedEntityName);
	}	
#end

#if ( $entity.nonKeyAttributesCount > 0 )
    //----------------------------------------------------------------------
	/**
	 * Updates the given bean in the database 
	 * @param $uncapitalizedEntityName
	 * @return
	 */
	@Override
	public int update(${entity.name} $uncapitalizedEntityName) {
		return super.doUpdate($uncapitalizedEntityName);
	}	
#end

    //----------------------------------------------------------------------
	/**
	 * Deletes the record in the database using the given primary key value(s) 
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
	 * @param ${attribute.name};
#end
	 * @return
	 */
	@Override
	public int delete( $fn.argumentsListWithType( $jdbc.attributesForPrimaryKey ) ) {
		${entity.name} $uncapitalizedEntityName = newInstanceWithPrimaryKey( $fn.argumentsList($jdbc.attributesForPrimaryKey) ) ;
		return super.doDelete($uncapitalizedEntityName);
	}

    //----------------------------------------------------------------------
	/**
	 * Deletes the given bean in the database 
	 * @param $uncapitalizedEntityName
	 * @return
	 */
	@Override
	public int delete( ${entity.name} $uncapitalizedEntityName ) {
		return super.doDelete($uncapitalizedEntityName);
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
	 * @param ${attribute.name};
#end
	 * @return
	 */
	@Override
	public boolean exists( $fn.argumentsListWithType( $jdbc.attributesForPrimaryKey ) ) {
		${entity.name} $uncapitalizedEntityName = newInstanceWithPrimaryKey( $fn.argumentsList($jdbc.attributesForPrimaryKey) ) ;
		return super.doExists($uncapitalizedEntityName);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param $uncapitalizedEntityName
	 * @return
	 */
	@Override
	public boolean exists( ${entity.name} $uncapitalizedEntityName ) {
		return super.doExists($uncapitalizedEntityName);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	@Override
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, ${entity.name} $uncapitalizedEntityName) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
		setValue(ps, i++, ${uncapitalizedEntityName}.${attribute.getter}() ) ; // "$attribute.databaseName" : $attribute.fullType
#end
	}

    //----------------------------------------------------------------------
	@Override
	protected ${entity.name} populateBean(ResultSet rs, ${entity.name} $uncapitalizedEntityName) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
#foreach( $attribute in $jdbc.attributesForSelect)
		${uncapitalizedEntityName}.${attribute.setter}(rs.$jdbc.resultSetGetter($attribute)("$attribute.databaseName")); // $attribute.fullType
#if ( $attribute.isNumberType() && $attribute.isPrimitiveType() == false )
		if ( rs.wasNull() ) { ${uncapitalizedEntityName}.${attribute.setter}(null); }; // not primitive number => keep null value if any
#end
#end
		return $uncapitalizedEntityName ;
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, ${entity.name} $uncapitalizedEntityName) throws SQLException {

		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
#foreach( $attribute in $entity.attributes )
#if ( $attribute.isAutoIncremented() )
		// "${attribute.databaseName}" is auto-incremented => no set in insert		
#end#end
#foreach( $attribute in $jdbc.attributesForInsert )
		setValue(ps, i++, ${uncapitalizedEntityName}.${attribute.getter}() ) ; // "$attribute.databaseName" : $attribute.fullType
##		ps.$jdbc.preparedStatementSetter($attribute)(i++, $jdbc.valueForPreparedStatement($attribute,${uncapitalizedEntityName}) ); // "$attribute.databaseName" : $attribute.fullType
#end
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, ${entity.name} $uncapitalizedEntityName) throws SQLException {

		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
#foreach( $attribute in $jdbc.attributesForUpdate )
		setValue(ps, i++, ${uncapitalizedEntityName}.${attribute.getter}() ) ; // "$attribute.databaseName" : $attribute.fullType
#end
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
		setValue(ps, i++, ${uncapitalizedEntityName}.${attribute.getter}() ) ; // "$attribute.databaseName" : $attribute.fullType
#end
	}

}
